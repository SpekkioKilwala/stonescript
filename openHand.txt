// To keep track of what a hand is currently doing, so it can tell whether it can accept a new task.
// No, the left hand doesn't know what the right is doing.

var hand // rh or lh
var task = none // readable string of what is being done
var delay = 0 // how much longer the current task will go for
var priority = 0 // priority of the current task, can only be replaced by HIGHER priority

var delayFloor = 0 // Delay can't decrement below this value via normal ticks; wands don't get their casting interrupted just because the initial delay elapses.

var logger = import logger

func init(_hand)
  hand = _hand

func handEquip(_thing)
  ?hand = rh
    equipR @_thing@
  :?hand = lh
    equipL @_thing@
  :
    // an error message would be nice

func myItem()
  ?hand = rh
    return item.right
  :
    return item.left

func myItemState()
  ?hand = rh
    return item.right.state
  :
    return item.left.state

func tick()
  ?myItem()=wand & myItemState()=2 // we're trying to cast from a wand right now, don't let the delay elapse!
    delayFloor = 1
  :
    delayFloor = 0
  
  ?delay>delayFloor
    delay--
  ?delay=0
    task=none
    priority=0

func newTask(_task, _priority, _delay)
  ?priority>=_priority
    return 0
  :
    // disabling the task reporting until I decide how to deal with things happening every frame
    // I can't generally stop delay from elapsing because a hand CAN'T move on to lower-priority tasks unless it does.
    // I could artificially suppress reporting if the new line is the same as the old one.
    // No, the answer is that I need to be clear between wanting to STAY in the same state, and wanting to REPEAT/RESTART an action.
    // I need to split up the layers of control; at the weakest level, you respect priority and don't replace an identical task.
    // and at the strongest level you just straight up SET it. There's maybe a middle level where you can replace an equal task.
    // logger.log(_task)
    priority = _priority
    task = _task
    delay = _delay
    handEquip(task)
    return 1