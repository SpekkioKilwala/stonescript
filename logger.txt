// The logger runs asynchronously. Example of using it for manual capture of data from a script
// running continuously and hook up a visibility-toggle button:
// (I put this in my main Mind Stone)

// var logger = import logger
//
// ?key=bumpRBegin // C to toggle console
//   logger.toggleVisibility()
// 
// ?key=backBegin
//   logger.log(foe)

var _log = [] // all the different logged elements.
  // only keeps the most recent 20 elements so that things don't get too crazy.
var maxHistory = 20
var active = 0
var _style = -2
var p // the panel
var t // the text element of the console; I'm not certain but I think I need to remake it each time.

func init()
  p = ui.AddPanel()
  p.visible=true
  p.color = #red
  p.anchor = top_right
  p.dock = top_right
  p.y = 1
  p.w = 64
  p.h = 12
  p.style = _style
  p.clip = true
  t = ui.AddText("default")
  p.Add(t)
  recreateText()

func log(_str)
  // given a string, add it to the array, trim the array, then re-derive the contents of the console panel text.
  // We want the MOST recent lines at the END so they go to the BOTTOM of the console.
  var str = _str + "" // I don't trust incoming stuff to actually be a string
  _log.Add(str)
  ?_log.Count()>maxHistory // this is only safe because we only add one line at a time; otherwise I'd need a loop.
    _log.RemoveAt(0)
  >@_log.Count() + : + str@
  recreateText()

func recreateText()
  // Remove the existing text component from the panel and make a new one from scratch from the _log array.
  // I believe this is needed, otherwise it doesn't update.
  p.Remove(t)
  t = ui.AddText()
  t.text = string.Join("\n", _log)
  t.x = 1
  t.y = -1
  t.w = p.w-2 // you lose the border so the text needs to be a bit smaller than the panel
  t.h = p.h-2
  t.align = left
  t.dock = bottom_left
  t.anchor = bottom_left
  p.Add(t)

func toggleVisibility()
  ?p.visible=true
    p.visible=false
  :
    p.visible=true
