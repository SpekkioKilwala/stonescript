// To call this, use:
// var logger = import logger
// in any script that needs it.
// It will run asynchronously just fine, but remember that anything that you want to listen
// for keypresses (like logging current game state) has to be executing on every tick.

var _log = []
var active = 0
var _style = -2
var t // reuse this

// I thinnnnnk the way to do it is to keep an array of all your *text components*,
// then whenever that array changes you redraw the thingy.

?loc.begin
  var p = ui.AddPanel()
  p.visible=true
  p.color = #red
  p.anchor = top_right
  p.dock = top_right
  p.y = 1
  p.w = 32
  p.h = 12
  p.style = _style

func newLine(str)
  // given a string, create the text element, and does initial positioning.
  // (correct vertical alignment is done by redraw())
  t = ui.AddText()
  t.text = str
  t.w = p.w
  t.align = left
  t.dock = top_left
  t.anchor = top_left
  t.x = 1
  _log.Add(t)
  p.Add(t)
  redraw()

func redraw()
  // If _log is too long (>10 elements), remove them from the start AND remove them from the panel.
  // call this whenever the contents of the _log array changes
  // Todo: add a check to remove excess items.
  var count = _log.Count()
  ?count > 0
    for i = 0 .. count - 1
      t = _log[i]
      t.y = 1 + i

//func log(str)

?key=bumpRBegin // C to toggle the console display on or off
  ?p.visible=true
    p.visible=false
  :
    p.visible=true
